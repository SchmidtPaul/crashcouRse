AIC(mod)
summary(mod)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corAR1(form = ~1|ind))
VarCorr(mod)
AIC(mod)
summary(mod)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corAR1(form = ~time|ind))
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
#random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corAR1(form = ~1|ind))
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corAR1(form = ~1|ind))
VarCorr(mod)
AIC(mod)
rm(list=ls())
library(data.table)
lemna <- fread("D:/Hohenheim/R improv/DataPiepho/lemna.dat")
names(lemna) <-  c("grp", "ind", "time", "y", "count")
lemna$grp   <- as.factor(lemna$grp)
lemna$time  <- as.factor(lemna$time)
lemna$ind   <- as.factor(lemna$ind)
# library(lme4); library(lmerTest)
# lmer(data    = lemna,
#      formula = y ~ grp + time + grp:time  )
library(nlme)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corAR1(form = ~1|ind))
VarCorr(mod)
AIC(mod)
summary(mod)
library(asreml)
asr <- asreml(data  = data.frame(lemna),
model = y ~ grp + time + grp:time,
rcov  = ~ ar1(time):ind )
asr <- asreml(data  = data.frame(lemna),
model = y ~ grp + time + grp:time,
rcov  = ~ ar1(ind):time )
asr <- asreml(data  = data.frame(lemna),
model = y ~ grp + time + grp:time,
rcov  = ~ ar1(ind):unit )
asr <- asreml(data  = data.frame(lemna),
model = y ~ grp + time + grp:time,
rcov  = ~ ar1(ind):units )
asr <- asreml(data  = data.frame(lemna),
model = y ~ grp + time + grp:time,
#rcov  = ~ ar1(ind):units
)
rm(list=ls())
library(data.table)
lemna <- fread("D:/Hohenheim/R improv/DataPiepho/lemna.dat")
names(lemna) <-  c("grp", "ind", "time", "y", "count")
lemna$grp   <- as.factor(lemna$grp)
lemna$time  <- as.factor(lemna$time)
lemna$ind   <- as.factor(lemna$ind)
# library(lme4); library(lmerTest)
# lmer(data    = lemna,
#      formula = y ~ grp + time + grp:time  )
library(nlme)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corAR1(form = ~1|ind))
VarCorr(mod)
AIC(mod)
summary(mod)
library(asreml)
asr <- asreml(data  = data.frame(lemna),
model = y ~ grp + time + grp:time,
#rcov  = ~ ar1(ind):units
)
data.frame(lemna)
asr <- asreml(data  = data.frame(lemna),
model = y ~ grp + time + grp:time
#rcov  = ~ ar1(ind):units
)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time
#rcov  = ~ ar1(ind):units
)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time
rcov  = ~ ar1(ind):units
)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ ar1(ind):units)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ ar1(ind):time)
summary(asr)$covparm
summary(asr)$varcomp
library(RCurl); URL<-getURL("https://raw.githubusercontent.com/SchmidtPaul/useful/master/functions/asremlr_useful.R", ssl.verifypeer = FALSE);eval(parse(text = URL));rm(URL)
getAIC(asr)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ ar1(ind):time)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ ar1(time):ind)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ ar1(ind):time)
summary(asr)$varcomp
getAIC(asr)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ cor(ind):time)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ corg(ind):time)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ cor(ind):time)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ cor(time):ind)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ cor(ind:time))
View(lemna)
asr <- asreml(data  = data.frame(lemna),
fixed = y ~ grp + time + grp:time,
rcov  = ~ cor(time):ind)
dat <- data.frame(lemna)
asr <- asreml(data  = dat,
fixed = y ~ grp + time + grp:time,
rcov  = ~ cor(time):ind)
dat[order(dat$time)]
lemna <- lemna[order(lemna$time)]
lemna
lemna <- lemna[order(lemna$time)]
dat <- data.frame(lemna)
asr <- asreml(data  = dat,
fixed = y ~ grp + time + grp:time,
rcov  = ~ cor(time):ind)
summary(asr)$varcomp
getAIC(asr)
asr <- asreml(data  = dat,
fixed = y ~ grp + time + grp:time,
rcov  = ~ corg(time):ind)
summary(asr)$varcomp
getAIC(asr)
summary(asr)$varcomp[,2]
summary(asr)$varcomp[,c(2,5)]
dat
lemna <- lemna[order(lemna$time)]
dat <- data.frame(lemna)
asr <- asreml(data  = dat,
fixed = y ~ grp + time + grp:time,
rcov  = ~ corg(time):ind)
summary(asr)$varcomp[,c(2,5)]
asr <- asreml(data  = dat,
fixed = y ~ grp + time + grp:time,
rcov  = ~ cor(time):ind)
summary(asr)$varcomp[,c(2,5)]
getAIC(asr)
wald.asreml(asr)
asr <- asreml(data  = dat,
fixed = y ~ grp + time + grp:time,
rcov  = ~ corg(time):ind)
summary(asr)$varcomp[,c(2,5)]
asr <- asreml(data  = dat,
fixed = y ~ grp + time + grp:time,
rcov  = ~ corgh(time):ind)
summary(asr)$varcomp[,c(2,5)]
wald.asreml(asr)
summary(asr)$varcomp[,c(2,5)]
getAIC(asr)
dat
asr <- asreml(data  = dat,
fixed = y ~ grp + time + grp:time)
summary(asr)$varcomp[,c(2,5)]
getAIC(asr)
wald.asreml(asr)
wald(asr, denDF = "algebraic")
lmer(data    = lemna,
formula = y ~ grp + time + grp:time + (1|ind) )
library(lme4); library(lmerTest)
lmer(data    = lemna,
formula = y ~ grp + time + grp:time + (1|ind) )
rm(list=ls())
library(data.table)
library(RCurl); URL<-getURL("https://raw.githubusercontent.com/SchmidtPaul/useful/master/functions/asremlr_useful.R", ssl.verifypeer = FALSE);eval(parse(text = URL));rm(URL)
lemna <- fread("D:/Hohenheim/R improv/DataPiepho/lemna.dat")
names(lemna) <-  c("grp", "ind", "time", "y", "count")
lemna$grp   <- as.factor(lemna$grp)
lemna$time  <- as.factor(lemna$time)
lemna$ind   <- as.factor(lemna$ind)
library(lme4); library(lmerTest)
lmer(data    = lemna,
formula = y ~ grp + time + grp:time + (1|ind) )
rm(list=ls())
library(data.table)
library(RCurl); URL<-getURL("https://raw.githubusercontent.com/SchmidtPaul/useful/master/functions/asremlr_useful.R", ssl.verifypeer = FALSE);eval(parse(text = URL));rm(URL)
lemna <- fread("D:/Hohenheim/R improv/DataPiepho/lemna.dat")
names(lemna) <-  c("grp", "ind", "time", "y", "count")
lemna$grp   <- as.factor(lemna$grp)
lemna$time  <- as.factor(lemna$time)
lemna$ind   <- as.factor(lemna$ind)
library(lme4); library(lmerTest)
lmer(data    = lemna,
formula = y ~ grp + time + grp:time + (1|ind) )
lmer(data    = lemna,
formula = y ~ grp + time + grp:time + (time|ind) )
library(nlme)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corAR1(form = ~1|ind))
VarCorr(mod)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corIdent(form = ~1|ind))
VarCorr(mod)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corCompSymm(form = ~1|ind))
VarCorr(mod)
AIC(mod)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corCompSymm(form = ~time|ind))
VarCorr(mod)
AIC(mod)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corCompSymm(form = ~time|ind))
VarCorr(mod)
AIC(mod)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corAR1(form = ~1|ind))
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind,
#correlation = corCompSymm(form=~time|ind))
correlation = corAR1(form = ~1|ind))
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind
#,correlation = corCompSymm(form=~time|ind)
#,correlation = corAR1(form = ~1|ind)
)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind
#,correlation = corCompSymm(form=~time|ind)
#,correlation = corAR1(form = ~1|ind)
)
VarCorr(mod)
AIC(mod)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind
#,correlation = corCompSymm(form=~time|ind)
,correlation = corAR1(form = ~1|ind)
)
VarCorr(mod)
AIC(mod)
summary(mod)
x <- summary(mod)
x$sigma
x$AIC
x$modelStruct$corStruct
VarCorr(mod)
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind
#,correlation = corCompSymm(form=~time|ind)
,correlation = corAR1(form = ~1|ind)
)
AIC(mod)
VarCorr(mod)
summary(mod)$modelStruct$corStruct
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind
,correlation = corCompSymm(form=~time|ind)
#,correlation = corAR1(form = ~1|ind)
)
AIC(mod)
VarCorr(mod)
summary(mod)$modelStruct$corStruct
mod <- lme(data   = data.frame(lemna),
fixed  = y ~ grp + time + grp*time,
random = ~ 1|ind
#,correlation = corCompSymm(form=~time|ind)
,correlation = corAR1(form = ~1|ind)
)
AIC(mod)
VarCorr(mod)
summary(mod)$modelStruct$corStruct
anova.lme(mod, type = "marginal", adjustSigma = F)
anova.lme(mod,  adjustSigma = F)
type = "marginal",
anova.lme(mod, type = "marginal", adjustSigma = F)
anova.lme(mod, type = "marginal", adjustSigma=F)
anova.lme(mod, type = "marginal")
anova.lme(mod, type="marginal")
install.packages("rmarkdown")
knit_with_parameters('D:/R Kurse/Dokumentation/Einleitung.Rmd')
?rmarkdown::pdf_document
?latex_engine
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
wheat <- wheat.binom[, c("block", "gen", "y", "n")]
wheat[, anteil := y/n] # erstelle Spalte "anteil"
library(data.table) # bessere Datenmanipulation
wheat[, anteil := y/n] # erstelle Spalte "anteil"
autoplot(lm(anteil ~ gen + block, data=wheat))
library(data.table)
library(desplot) # plotte Feldplan
library(RColorBrewer) # Farben für Feldplan
genfarben <- c(brewer.pal(8, "YlOrRd"), brewer.pal(8, "GnBu"))
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
library(data.table) # bessere Datenmanipulation
library(ggplot2); library(ggfortify) # bessere Plots
library(emmeans) # adjustierte Mittelwerte
desplot(data=wheat.binom, form= gen ~ col+row,
col.regions=genfarben,
text=gen, shorten="no", cex=0.8,
out1=block, aspect=1,
main="", show.key=F)
wheat <- wheat.binom[, c("block", "gen", "y", "n")]
wheat[, anteil := y/n] # erstelle Spalte "anteil"
print(wheat, nrows=10)
str(wheat, width=40, strict.width="cut")
boxplot(anteil ~ gen, col=genfarben, data=wheat, las=2)
autoplot(lm(anteil ~ gen + block, data=wheat))
?glm
anova(mod, test="F")
install.packages("car")
car::Anova(mod, type="III")
plot(wheat$y)
plot(wheat$y/wheat$n)
plot(wheat$n)
?anova.glm
library(data.table)
library(desplot) # plotte Feldplan
library(RColorBrewer) # Farben für Feldplan
genfarben <- c(brewer.pal(8, "YlOrRd"), brewer.pal(8, "GnBu"))
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
library(data.table) # bessere Datenmanipulation
library(ggplot2); library(ggfortify) # bessere Plots
library(emmeans) # adjustierte Mittelwerte
desplot(data=wheat.binom, form= gen ~ col+row,
col.regions=genfarben,
text=gen, shorten="no", cex=0.8,
out1=block, aspect=1,
main="", show.key=F)
wheat <- wheat.binom[, c("block", "gen", "y", "n")]
wheat[, anteil := y/n] # erstelle Spalte "anteil"
print(wheat, nrows=10)
str(wheat, width=40, strict.width="cut")
boxplot(anteil ~ gen, col=genfarben, data=wheat, las=2)
mod <- glm(y/n ~ gen + block, data=wheat, family="binomial")
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
rm(list=ls())
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
glm(y/n ~ gen + block, data=wheat.binom)
anova(mod)
rm(list=ls())
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
mod <- glm(y/n ~ gen + block, data=wheat.binom)
mod
anova(mod)
anova(mod, test="F")
library(data.table)
library(desplot) # plotte Feldplan
library(RColorBrewer) # Farben für Feldplan
genfarben <- c(brewer.pal(8, "YlOrRd"), brewer.pal(8, "GnBu"))
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
library(data.table) # bessere Datenmanipulation
library(ggplot2); library(ggfortify) # bessere Plots
library(emmeans) # adjustierte Mittelwerte
desplot(data=wheat.binom, form= gen ~ col+row,
col.regions=genfarben,
text=gen, shorten="no", cex=0.8,
out1=block, aspect=1,
main="", show.key=F)
wheat <- wheat.binom[, c("block", "gen", "y", "n")]
mod <- glm(y/n ~ gen + block, data=wheat, family="binomial")
rm(list=ls())
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
mod <- glm(y/n ~ gen + block, data=wheat.binom)
mod
rm(list=ls())
load("D:/RKurse/Dokumentation/crashcouRse/datasets/wheat binomial.rda")
mod <- glm(y/n ~ gen + block, data=wheat.binom)
mod
summary(mod)
mod <- glm(y/n ~ gen + block, data=wheat.binom, family="binomial")
summary(mod)
anova(mod, test="F")
mod <- glm(anteil ~ gen + block, data=wheat.binom, family="binomial")
wheat.binom$anteil <- wheat.binom$y/wheat.binom$n
mod <- glm(anteil ~ gen + block, data=wheat.binom, family="binomial")
?glm
mod <- glm(anteil ~ gen + block, data=wheat.binom, link="logit")
mod <- glm(anteil ~ gen + block, data=wheat.binom, family=binomial)
mod <- glm(anteil ~ gen + block, data=wheat.binom, family=binomial)
mod
summary(mod)
anova(mod, test="F")
mod <- glm(anteil ~ gen + block, data=wheat.binom, family=binomial(link="logit"))
mod <- glm(anteil ~ gen + block,
data=wheat.binom,
family=binomial(link="logit"))
mod
summary(mod)
anova(mod, test="F")
mod <- glm(y/n ~ gen + block,
data=wheat.binom)
mod
summary(mod)
anova(mod, test="F")
View(wheat.binom)
mod <- glm(y/n ~ gen + block,
data=wheat.binom)
mod
mod <- glm(y/n ~ gen + block,
data=wheat.binom)
mod
summary(mod)
mod <- glm(y/n ~ gen + block,
data=wheat.binom)
mod
summary(mod)
mod <- glm(anteil ~ gen + block,
data=wheat.binom,
family=binomial(link="logit"), )
summary(mod)
mod <- glm(anteil ~ gen + block,
data=wheat.binom,
family=quasibinomial)
mod
summary(mod)
anova(mod, test="F")
car::Anova(mod, type="III")
mod <- glm(anteil ~ gen + block,
data=wheat.binom,
family=quasibinomial)
mod
mod <- glm(y/n ~ gen + block,
data=wheat.binom)
mod
mod <- glm(anteil ~ gen + block,
data=wheat.binom,
family=quasibinomial)
mod <- glm(y/n ~ gen + block,
data=wheat.binom)
mod
summary(mod)
anova(mod, test="F")
mod <- glm(y/n ~ gen + block, data=wheat.binom)
mod
summary(mod)
anova(mod, test="F")
mod <- glm(y/n ~ gen + block, data=wheat.binom, family=binomial)
anova(mod, test="F")
car::Anova(mod, type="III")
knit_with_parameters('D:/RKurse/Dokumentation/crashcouRse/1wayANOVA_alpha.Rmd', encoding = 'UTF-8')
rmarkdown::render_site( "pdf_document", encoding="UTF-8")
getwd()
rm(list=ls())
fread("D:/RKurse/Dokumentation/crashcouRse/datasets/rice RCBD.txt")
library(data.table)
fread("D:/RKurse/Dokumentation/crashcouRse/datasets/rice RCBD.txt")
rice <- fread("D:/RKurse/Dokumentation/crashcouRse/datasets/rice RCBD.txt")
print(riceRCBD, nrows=10)
riceRCBD <- fread("D:/RKurse/Dokumentation/crashcouRse/datasets/rice RCBD.txt")
print(riceRCBD, nrows=10)
str(riceRCBD)
boxplot(yield ~ N*G, data=riceRCBD, las=2)
boxplot(yield ~ N, data=riceRCBD, las=2)
boxplot(yield ~ G, data=riceRCBD, las=2)
boxplot(yield ~ N*G, data=riceRCBD, las=2)
library(knitr)
purl("D:/RKurse/Dokumentation/crashcouRse/2F_rcbd.Rmd")
gewd()
getwd()
setwd("D:/RKurse/Dokumentation/crashcouRse")
library("rmarkdown")
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
