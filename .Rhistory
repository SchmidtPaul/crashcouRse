fixed = y ~ week + week:gen + week:rep,
rcov  = ~ ar1(week):plot)
summary(asr.ar)$varcomp[,c(2,3,5)] # AR var + cor
# CS: compound symmetry
asr.cs <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ cor(week):plot)
summary(asr.cs)$varcomp[,c(2,3,5)] # CS var + cor
# UN: Unstructured
asr.un <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ us(week):plot)
summary(asr.un)$varcomp[, c(2,3,5)] # UN vars + cors
rm(list=ls())
library(asreml)       # linear mixed model package
library(nlme)         # linear mixed model package
# load example dataset from github
load(url("https://github.com/SchmidtPaul/useful/blob/master/nlmeVSasreml/sorghum%20repmes.rda?raw=true"))
# ID: independent, uncorrelated random plot error
gls.id <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep)
gls.id$sigma^2 # ID.var
# DIAG: heterogeneous variances per week
gls.dg <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
weights = varIdent(form = ~ 1|week))
c(gls.dg$sigma^2, coef(gls.dg$modelStruct$varStruct, unconstrained=T)) # DG.vars
# AR1: first-order autoregressive
gls.ar <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corExp(form = ~ week|plot))
gls.ar$sigma^2 # AR1.var
as.numeric(exp(-1/coef(gls.ar$modelStruct$corStruct, unconstrained=F))) # AR1.cor
# CS: compound symmetry
gls.cs <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corCompSymm(form = ~ week|plot))
gls.cs$sigma^2 # CS.var
coef(gls.cs$modelStruct$corStruct, unconstrained=F) # CS.cor
# UN: Unstructured
gls.un <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corSymm(form = ~ 1|plot),
weights = varIdent(form = ~ 1|week))
c(gls.un$sigma^2, coef(gls.un$modelStruct$varStruct, unconstrained=T)) # UN.vars
gls.un$modelStruct$corStruct # UN.cors
# AIC values
AIC(gls.id)
AIC(dls.dg)
AIC(gls.ar)
# DIAG: heterogeneous variances per week
gls.dg <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
weights = varIdent(form = ~ 1|week))
c(gls.dg$sigma^2, coef(gls.dg$modelStruct$varStruct, unconstrained=T)) # DG.vars
AIC(gls.dg)
AIC(gls.ar)
AIC(gls.cs)
AIC(gls.un)
### asreml() of asreml-package
##############################
repmes <- repmes[order(week)]   # data needs to be sorted correctly
repmes <- as.data.frame(repmes) # data needs to be a data.frame
repmes
rm(list=ls())
library(asreml)       # linear mixed model package
library(nlme)         # linear mixed model package
### Repeated measures example ###
#################################
### For more info on repeated measures see ch. 7 of "Quantitative
### Methods in Biosciences", ch. 6 in "Mixed models for metric data"
### and Example 4 of Piepho HP, Edmondson RN. A tutorial on the statistical
### analysis of factorial experiments with qualitative and quantitative
### treatment factor levels. J Agro Crop Sci. 2018;204:429-455.
# load example dataset from github
load(url("https://github.com/SchmidtPaul/useful/blob/master/nlmeVSasreml/sorghum%20repmes.rda?raw=true"))
### asreml() of asreml-package
##############################
repmes <- repmes[order(week)]   # data needs to be sorted correctly
### asreml() of asreml-package
##############################
repmes <- repmes[order("week")]   # data needs to be sorted correctly
repmes <- as.data.frame(repmes) # data needs to be a data.frame
# ID: independent, uncorrelated random plot error
asr.id <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep)
rm(list=ls())
library(asreml)       # linear mixed model package
library(nlme)         # linear mixed model package
### Repeated measures example ###
#################################
### For more info on repeated measures see ch. 7 of "Quantitative
### Methods in Biosciences", ch. 6 in "Mixed models for metric data"
### and Example 4 of Piepho HP, Edmondson RN. A tutorial on the statistical
### analysis of factorial experiments with qualitative and quantitative
### treatment factor levels. J Agro Crop Sci. 2018;204:429-455.
# load example dataset from github
load(url("https://github.com/SchmidtPaul/useful/blob/master/nlmeVSasreml/sorghum%20repmes.rda?raw=true"))
str(repmes)
rm(list=ls())
library(asreml)       # linear mixed model package
library(nlme)         # linear mixed model package
### Repeated measures example ###
#################################
### For more info on repeated measures see ch. 7 of "Quantitative
### Methods in Biosciences", ch. 6 in "Mixed models for metric data"
### and Example 4 of Piepho HP, Edmondson RN. A tutorial on the statistical
### analysis of factorial experiments with qualitative and quantitative
### treatment factor levels. J Agro Crop Sci. 2018;204:429-455.
# load example dataset from github
load(url("https://github.com/SchmidtPaul/useful/blob/master/nlmeVSasreml/sorghum%20repmes.rda?raw=true"))
### gls() of nlme-package
#########################
# ID: independent, uncorrelated random plot error
gls.id <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep)
gls.id$sigma^2 # ID.var
# DIAG: heterogeneous variances per week
gls.dg <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
weights = varIdent(form = ~ 1|week))
c(gls.dg$sigma^2, coef(gls.dg$modelStruct$varStruct, unconstrained=T)) # DG.vars
# AR1: first-order autoregressive
gls.ar <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corExp(form = ~ week|plot))
gls.ar$sigma^2 # AR1.var
as.numeric(exp(-1/coef(gls.ar$modelStruct$corStruct, unconstrained=F))) # AR1.cor
# CS: compound symmetry
gls.cs <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corCompSymm(form = ~ week|plot))
gls.cs$sigma^2 # CS.var
coef(gls.cs$modelStruct$corStruct, unconstrained=F) # CS.cor
# UN: Unstructured
gls.un <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corSymm(form = ~ 1|plot),
weights = varIdent(form = ~ 1|week))
c(gls.un$sigma^2, coef(gls.un$modelStruct$varStruct, unconstrained=T)) # UN.vars
gls.un$modelStruct$corStruct # UN.cors
# AIC values
AIC(gls.id)
AIC(gls.dg)
AIC(gls.ar)
AIC(gls.cs)
AIC(gls.un)
### asreml() of asreml-package
##############################
repmes <- repmes[order("week")] # data needs to be sorted correctly
repmes <- as.data.frame(repmes) # data needs to be a data.frame
str(repmes)
rm(list=ls())
library(asreml)       # linear mixed model package
library(nlme)         # linear mixed model package
### Repeated measures example ###
#################################
### For more info on repeated measures see ch. 7 of "Quantitative
### Methods in Biosciences", ch. 6 in "Mixed models for metric data"
### and Example 4 of Piepho HP, Edmondson RN. A tutorial on the statistical
### analysis of factorial experiments with qualitative and quantitative
### treatment factor levels. J Agro Crop Sci. 2018;204:429-455.
# load example dataset from github
load(url("https://github.com/SchmidtPaul/useful/blob/master/nlmeVSasreml/sorghum%20repmes.rda?raw=true"))
### gls() of nlme-package
#########################
# ID: independent, uncorrelated random plot error
gls.id <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep)
gls.id$sigma^2 # ID.var
# DIAG: heterogeneous variances per week
gls.dg <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
weights = varIdent(form = ~ 1|week))
c(gls.dg$sigma^2, coef(gls.dg$modelStruct$varStruct, unconstrained=T)) # DG.vars
# AR1: first-order autoregressive
gls.ar <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corExp(form = ~ week|plot))
gls.ar$sigma^2 # AR1.var
as.numeric(exp(-1/coef(gls.ar$modelStruct$corStruct, unconstrained=F))) # AR1.cor
# CS: compound symmetry
gls.cs <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corCompSymm(form = ~ week|plot))
gls.cs$sigma^2 # CS.var
coef(gls.cs$modelStruct$corStruct, unconstrained=F) # CS.cor
# UN: Unstructured
gls.un <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corSymm(form = ~ 1|plot),
weights = varIdent(form = ~ 1|week))
c(gls.un$sigma^2, coef(gls.un$modelStruct$varStruct, unconstrained=T)) # UN.vars
gls.un$modelStruct$corStruct # UN.cors
# AIC values
AIC(gls.id)
AIC(gls.dg)
AIC(gls.ar)
AIC(gls.cs)
AIC(gls.un)
### asreml() of asreml-package
##############################
repmes <- repmes[,order(week)]
str(repmes)
repmes
### asreml() of asreml-package
##############################
repmes <- repmes[order(week),] # data needs to be sorted correctly
repmes
repmes[order(week)]
repmes$week
### asreml() of asreml-package
##############################
repmes <- repmes[order(week),] # data needs to be sorted correctly
install.packages("data.table")
rm(list=ls())
library(data.table) # better data handling
library(asreml)     # linear mixed model package
library(nlme)       # linear mixed model package
### Repeated measures example ###
#################################
### For more info on repeated measures see ch. 7 of "Quantitative
### Methods in Biosciences", ch. 6 in "Mixed models for metric data"
### and Example 4 of Piepho HP, Edmondson RN. A tutorial on the statistical
### analysis of factorial experiments with qualitative and quantitative
### treatment factor levels. J Agro Crop Sci. 2018;204:429-455.
# load example dataset from github
load(url("https://github.com/SchmidtPaul/useful/blob/master/nlmeVSasreml/sorghum%20repmes.rda?raw=true"))
### gls() of nlme-package
#########################
# ID: independent, uncorrelated random plot error
gls.id <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep)
gls.id$sigma^2 # ID.var
# DIAG: heterogeneous variances per week
gls.dg <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
weights = varIdent(form = ~ 1|week))
c(gls.dg$sigma^2, coef(gls.dg$modelStruct$varStruct, unconstrained=T)) # DG.vars
# AR1: first-order autoregressive
gls.ar <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corExp(form = ~ week|plot))
gls.ar$sigma^2 # AR1.var
as.numeric(exp(-1/coef(gls.ar$modelStruct$corStruct, unconstrained=F))) # AR1.cor
# CS: compound symmetry
gls.cs <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corCompSymm(form = ~ week|plot))
gls.cs$sigma^2 # CS.var
coef(gls.cs$modelStruct$corStruct, unconstrained=F) # CS.cor
# UN: Unstructured
gls.un <- gls(data  = repmes,
model = y ~ week + week*gen + week*rep,
corr  = corSymm(form = ~ 1|plot),
weights = varIdent(form = ~ 1|week))
c(gls.un$sigma^2, coef(gls.un$modelStruct$varStruct, unconstrained=T)) # UN.vars
gls.un$modelStruct$corStruct # UN.cors
# AIC values
AIC(gls.id)
AIC(gls.dg)
AIC(gls.ar)
AIC(gls.cs)
AIC(gls.un)
### asreml() of asreml-package
##############################
repmes <- repmes[order(week),] # data needs to be sorted correctly
repmes <- as.data.frame(repmes) # data needs to be a data.frame
# ID: independent, uncorrelated random plot error
asr.id <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep)
summary(asr.id)$varcomp[,c(2,3,5)] # ID.var
# DIAG: heterogeneous variances per week
asr.dg <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ at(week):plot)
summary(asr.dg)$varcomp[,c(2,3,5)] # DG.vars
# AR1: first-order autoregressive
asr.ar <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ ar1(week):plot)
summary(asr.ar)$varcomp[,c(2,3,5)] # AR var + cor
# CS: compound symmetry
asr.cs <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ cor(week):plot)
summary(asr.cs)$varcomp[,c(2,3,5)] # CS var + cor
# UN: Unstructured
asr.un <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ us(week):plot)
summary(asr.un)$varcomp[, c(2,3,5)] # UN vars + cors
# ID: independent, uncorrelated random plot error
asr.id <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep)
summary(asr.id)$varcomp[,c(2,3,5)] # ID.var
# DIAG: heterogeneous variances per week
asr.dg <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ at(week):plot)
summary(asr.dg)$varcomp[,c(2,3,5)] # DG.vars
# AR1: first-order autoregressive
asr.ar <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ ar1(week):plot)
summary(asr.ar)$varcomp[,c(2,3,5)] # AR var + cor
# CS: compound symmetry
asr.cs <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ cor(week):plot)
summary(asr.cs)$varcomp[,c(2,3,5)] # CS var + cor
# UN: Unstructured
asr.un <- asreml(data  = repmes,
fixed = y ~ week + week:gen + week:rep,
rcov  = ~ us(week):plot)
summary(asr.un)$varcomp[, c(2,3,5)] # UN vars + cors
install.packages("knitr")
install.packages("stringi")
install.packages("knitr")
install.packages("evaluate")
install.packages("stringr")
install_version("stringr", version = "1.3.1")
install.packages(stringr, type="source")
install.packages("stringr", type="source")
data(nin89)
library(data.table) # bessere Datenmanipulation
library(asreml) # gemischtes Modell package 2 - benötigt R version 3.2.3. und Lizenz
data(nin89)
nin89
library(asreml) # requires R version 3.2.3. and license
data(nin89) # load example dataset
# asr.un <- asreml(data  = repmes,
#                  fixed = y ~ week + week:gen + week:rep,
#                  rcov  = ~ us(week):plot)
# summary(asr.un)$varcomp[, c(2,3,5)] # UN vars + cors
View(nin89)
library(desplot)
install.packages("desplot")
vigniette(assreml)
vignette(assreml)
vignette(asreml)
vignette("asreml")
library(asreml) # requires R version 3.2.3. and license
library(desplot)
data(nin89) # load example dataset from asreml package
vignette("asreml")
nin89.asr <- asreml(fixed  = yield ~ Variety,
random = ~ Rep,
data   = nin89, na.method.X = “include”)
library(asreml) # requires R version 3.2.3. and license
library(desplot)
data(nin89) # load example dataset from asreml package
vignette("asreml")
nin89.asr <- asreml(fixed  = yield ~ Variety,
random = ~ Rep,
data   = nin89, na.method.X = "include")
library(asreml) # requires R version 3.2.3. and license
library(desplot)
data(nin89) # load example dataset from asreml package
vignette("asreml")
nin89.asr <- asreml(fixed  = yield ~ Variety,
random =       ~ Rep,
data   = nin89,
na.method.X = "include")
summary(nin89.asr)$varcomp
summary(nin89.asr)$varcomp[,c(2,3,5)]
predict(nin89.asr, classify = "Variety")
predict(nin89.asr, classify="Variety")$pvals
predict(nin89.asr, classify="Variety")$pred
predict(nin89.asr, classify="Variety")$pred$pvals
predict(nin89.asr, classify="Variety")$pred$avsed
'getAIC' <- function(asremlmod)
{
vc     <- data.table(summary(asremlmod)$varcomp)
loglik <- summary(asremlmod)$loglik
n.par  <- dim(vc[constraint!="Fixed" & constraint!="Constrained"])[1]
out <- data.frame(loglik   = loglik,
m2loglik = -2 * loglik,
n.par    = n.par,
AIC      = -2 * loglik + 2 * n.par)
out
}
getAIC(nin89.asr)
### spatial model: one direction p.42
#####################################
sp.asr <- asreml(fixed = yield ~ Variety,
rcov  = ~ Column:ar1(Row),
data  = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
### Model 2a p.42
#################
sp.asr <- asreml(fixed = yield ~ Variety,
rcov  = ~ ar1(Column):ar1(Row),
data  = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
### Model 2b p.42
#################
sp.asr <- asreml(fixed = yield ~ Variety,
random = ~ units,
rcov  = ~ ar1(Column):ar1(Row),
data  = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
### Model 3 p.43
################
sp.asr <- asreml(fixed  = yield ~ Variety,
random = ~ ar1v(Column):ar1(Row),
data   = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
library(asreml) # requires R version 3.2.3. and license
library(desplot)
data(nin89) # load example dataset from asreml package
### Basic model p. 25
#####################
nin89.asr <- asreml(fixed  = yield ~ Variety,
random =       ~ Rep,
data   = nin89,
na.method.X = "include")
# Basic model outputs
summary(nin89.asr)$varcomp[,c(2,3,5)] # variance components
predict(nin89.asr, classify="Variety")$pred$pvals # adjusted means with s.e.
predict(nin89.asr, classify="Variety")$pred$avsed # average s.e.d.
# AIC: actually need to define a function. I pasted it at the bottom of this code.
# After running it, this gets you the AIC: getAIC(nin89.asr)
### Model 2 p.42
################
sp.asr <- asreml(fixed = yield ~ Variety,
rcov  = ~ Column:ar1(Row),
data  = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
### Model 2a p.42
#################
sp.asr <- asreml(fixed = yield ~ Variety,
rcov  = ~ ar1(Column):ar1(Row),
data  = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
### Model 2b p.42
#################
sp.asr <- asreml(fixed = yield ~ Variety,
random = ~ units,
rcov  = ~ ar1(Column):ar1(Row),
data  = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
### Model 3 p.43   is equal to   Model 2b
#########################################
sp.asr <- asreml(fixed  = yield ~ Variety,
random = ~ ar1v(Column):ar1(Row),
data   = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
sp.asr <- asreml(fixed  = yield ~ Variety,
random = ~ ar1v(Column):ar1(Row),
data   = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
# Model 3 again, but giving initial values
##########################################
sp.asr <- asreml(fixed  = yield ~ Variety,
random = ~ ar1v(Column, init=c(0.8)):ar1(Row),
data   = nin89,
na.method.X = "include")
# Model 3 again, but giving initial values
##########################################
sp.asr <- asreml(fixed  = yield ~ Variety,
random = ~ ar1v(Column, init=c(0.8 ,0.8)):ar1(Row),
data   = nin89,
na.method.X = "include")
# Model 3 again, but giving initial values
##########################################
sp.asr <- asreml(fixed  = yield ~ Variety,
random = ~ ar1v(Column, init=c(0.8 ,0.8)):ar1(Row, init=c(0.8)),
data   = nin89,
na.method.X = "include")
summary(sp.asr)$varcomp[,c(2,3,5)]
nin89[order[row]]
nin89[order()row]
nin89[order(row)]
nin89
nin89[order(nin89$row)]
nin89[order(nin89$row),]
nin89[order(Row)]
nin89[order(Row),]
nin89[order(nin89$Row),]
nin89 <- nin89[order(nin89$Row),]
### Model 2 p.42
################
sp.asr <- asreml(fixed = yield ~ Variety,
rcov  = ~ Column:ar1(Row),
data  = nin89,
na.method.X = "include")
nin89 <- nin89[order(nin89$Column),]
### Model 2 p.42
################
sp.asr <- asreml(fixed = yield ~ Variety,
rcov  = ~ Column:ar1(Row),
data  = nin89,
na.method.X = "include")
setwd("D:/RKurse/Dokumentation/crashcouRse")
library("rmarkdown")
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
# Mehr Infos
# Split Plot:
#   Bailey (2008) 8.3 + 8.4
#   Dean & Voss (1998) 2.44 + 19
#   Quinn & Keough (2002) 11.1
