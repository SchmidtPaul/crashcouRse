means <- emmeans(mod, pairwise ~ Sorte)#, type="response")
means
# emmeans
means <- emmeans(mod, pairwise ~ Sorte, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
means
# emmeans
means <- emmeans(mod, pairwise ~ Sorte)#, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
means
load(file="D:/RKurse/MyDatasets/ifz - 1F met rcbd binom.rda")
library(glmmTMB)
library(emmeans)
str(ifz)
# Modell: 1F MET with RCBD für Prozentzahl
mod <- glmmTMB(y/m ~ Sorte + (1|Ort) + (1|Block:Ort) + (1|Sorte:Ort),
weights= m,
family = binomial(link='logit'),
data   = ifz,
REML   = FALSE)
summary(mod)
sigma(mod)
# Analysis of Deviance
Anova(mod, type="III") # Wald Test
# emmeans
means <- emmeans(mod, pairwise ~ Sorte, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
ggplot() + theme_classic() +
# Rohdaten (ifz)
geom_boxplot(data=ifz, aes(x=Sorte, y=(y/n)), outlier.shape=NA, width=0.6) +
geom_jitter(data=ifz, aes(x=Sorte, y=(y/n)), width=0.25, height=0, shape=1) +
# Ergebnisse (means)
geom_point(data=means, aes(x=as.numeric(Sorte)+0.4, y=prob     ), col="red", shape=16, size=2) +
geom_errorbar(data=means, aes(x=as.numeric(Sorte)+0.4, ymin=asymp.LCL, ymax=asymp.UCL), col="red", width=0.1) +
geom_text(data=means, aes(x=as.numeric(Sorte)+0.5, y=prob     , label =.group), col="red") +
labs(y="Schwarz: Prozentualer Befall\nRot: Adjustierter, rücktransformierter Mittelwert ± 95% Konfidenzintervall", x="Sorte",
caption="Mittelwerte, die mit einem gemeinsamen Buchstaben versehen sind, sind laut Tukey-test nicht signifikant voneinander verschieden.")
load(file="D:/RKurse/MyDatasets/ifz - 1F met rcbd binom.rda")
library(glmmTMB)
library(emmeans)
library(ggplot2)
str(ifz)
# Modell: 1F MET with RCBD für Prozentzahl
mod <- glmmTMB(y/m ~ Sorte + (1|Ort) + (1|Block:Ort) + (1|Sorte:Ort),
weights= m,
family = binomial(link='logit'),
data   = ifz,
REML   = FALSE)
summary(mod)
sigma(mod)
# Analysis of Deviance
Anova(mod, type="III") # Wald Test
# emmeans
means <- emmeans(mod, pairwise ~ Sorte, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
ggplot() + theme_classic() +
# Rohdaten (ifz)
geom_boxplot(data=ifz, aes(x=Sorte, y=(y/n)), outlier.shape=NA, width=0.6) +
geom_jitter(data=ifz, aes(x=Sorte, y=(y/n)), width=0.25, height=0, shape=1) +
# Ergebnisse (means)
geom_point(data=means, aes(x=as.numeric(Sorte)+0.4, y=prob     ), col="red", shape=16, size=2) +
geom_errorbar(data=means, aes(x=as.numeric(Sorte)+0.4, ymin=asymp.LCL, ymax=asymp.UCL), col="red", width=0.1) +
geom_text(data=means, aes(x=as.numeric(Sorte)+0.5, y=prob     , label =.group), col="red") +
labs(y="Schwarz: Prozentualer Befall\nRot: Adjustierter, rücktransformierter Mittelwert ± 95% Konfidenzintervall", x="Sorte",
caption="Mittelwerte, die mit einem gemeinsamen Buchstaben versehen sind, sind laut Tukey-test nicht signifikant voneinander verschieden.")
means
ifz
load(file="D:/RKurse/MyDatasets/ifz - 1F met rcbd binom.rda")
library(glmmTMB)
library(emmeans)
library(ggplot2)
str(ifz)
# Modell: 1F MET with RCBD für Prozentzahl
mod <- glmmTMB(y/m ~ Sorte + (1|Ort) + (1|Block:Ort) + (1|Sorte:Ort),
weights= m,
family = binomial(link='logit'),
data   = ifz,
REML   = FALSE)
summary(mod)
sigma(mod)
# Analysis of Deviance
Anova(mod, type="III") # Wald Test
# emmeans
means <- emmeans(mod, pairwise ~ Sorte, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
ggplot() + theme_classic() +
# Rohdaten (ifz)
geom_boxplot(data=ifz, aes(x=Sorte, y=(y/m)), outlier.shape=NA, width=0.6) +
geom_jitter(data=ifz, aes(x=Sorte, y=(y/m)), width=0.25, height=0, shape=1) +
# Ergebnisse (means)
geom_point(data=means, aes(x=as.numeric(Sorte)+0.4, y=prob     ), col="red", shape=16, size=2) +
geom_errorbar(data=means, aes(x=as.numeric(Sorte)+0.4, ymin=asymp.LCL, ymax=asymp.UCL), col="red", width=0.1) +
geom_text(data=means, aes(x=as.numeric(Sorte)+0.5, y=prob     , label =.group), col="red") +
labs(y="Schwarz: Prozentualer Befall\nRot: Adjustierter, rücktransformierter Mittelwert ± 95% Konfidenzintervall", x="Sorte",
caption="Mittelwerte, die mit einem gemeinsamen Buchstaben versehen sind, sind laut Tukey-test nicht signifikant voneinander verschieden.")
means
load(file="D:/RKurse/MyDatasets/ifz - 1F met rcbd binom.rda")
library(glmmTMB)
library(emmeans)
library(ggplot2)
str(ifz)
# Modell: 1F MET with RCBD für Prozentzahl
mod <- glmmTMB(y/m ~ Sorte + (1|Ort) + (1|Block:Ort) + (1|Sorte:Ort),
weights= m,
family = binomial(link='logit'),
data   = ifz,
REML   = FALSE)
summary(mod)
sigma(mod)
# Analysis of Deviance
Anova(mod, type="III") # Wald Test
# emmeans
means <- emmeans(mod, pairwise ~ Sorte, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
ggplot() + theme_classic() +
# Rohdaten (ifz)
geom_boxplot(data=ifz, aes(x=Sorte, y=(y/m)), outlier.shape=NA, width=0.6) +
geom_jitter(data=ifz, aes(x=Sorte, y=(y/m)), width=0.25, height=0, shape=1) +
# Ergebnisse (means)
geom_point(data=means, aes(x=as.numeric(Sorte)+0.4, y=prob     ), col="red", shape=16, size=2) +
geom_errorbar(data=means, aes(x=as.numeric(Sorte)+0.4, ymin=asymp.LCL, ymax=asymp.UCL), col="red", width=0.1) +
geom_text(data=means, aes(x=as.numeric(Sorte)+0.5, y=prob     , label =.group), col="red") +
labs(y="Schwarz: Prozentualer Befall\nRot: Adjustierter, rücktransformierter Mittelwert ± 95% Konfidenzintervall", x="Sorte",
caption="Mittelwerte, die mit einem gemeinsamen Buchstaben versehen sind, sind laut Tukey-test nicht signifikant voneinander verschieden.")
# emmeans
means <- emmeans(mod, pairwise ~ Sorte, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
means
load(file="D:/RKurse/MyDatasets/ifz - 1F met rcbd binom.rda")
library(glmmTMB)
library(emmeans)
library(ggplot2)
str(ifz)
# Modell: 1F MET with RCBD für Prozentzahl
mod <- glmmTMB(y/m ~ Sorte + (1|Ort) + (1|Block:Ort) + (1|Sorte:Ort),
weights= m,
family = binomial(link='logit'),
data   = ifz,
REML   = FALSE)
summary(mod)
sigma(mod)
# Analysis of Deviance
Anova(mod, type="III") # Wald Test
# emmeans
means <- emmeans(mod, pairwise ~ Sorte, type="response")
means <- multcomp::cld(means$emmeans, details=TRUE, Letters=letters)$emmeans
ggplot() + theme_classic() +
# Rohdaten (ifz)
geom_boxplot(data=ifz, aes(x=Sorte, y=(y/m)), outlier.shape=NA, width=0.6) +
geom_jitter(data=ifz, aes(x=Sorte, y=(y/m)), width=0.25, height=0, shape=1) +
# Ergebnisse (means)
geom_point(data=means, aes(x=as.numeric(Sorte)+0.4, y=prob     ), col="red", shape=16, size=2) +
geom_errorbar(data=means, aes(x=as.numeric(Sorte)+0.4, ymin=lower.CL, ymax=upper.CL), col="red", width=0.1) +
geom_text(data=means, aes(x=as.numeric(Sorte)+0.5, y=prob     , label =.group), col="red") +
labs(y="Schwarz: Prozentualer Befall\nRot: Adjustierter, rücktransformierter Mittelwert ± 95% Konfidenzintervall", x="Sorte",
caption="Mittelwerte, die mit einem gemeinsamen Buchstaben versehen sind, sind laut Tukey-test nicht signifikant voneinander verschieden.")
#
data(cars)
#
data(cars)
head(mtcars, 6)
# Beispieldatensatz
data(mtcars)
head(mtcars, 6)
# Beispieldatensatz
data(mtcars)
?mtcars
data(mtcars)
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("auto", "manu"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
mtcars <- mtcars2 %>% select(mpg, hp, am)
library(data.table)
library(dplyr)
data(mtcars)
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("auto", "manu"))
cyl  <- ordered(cyl)
gear <- ordered(gear)
carb <- ordered(carb)
})
mtcars <- mtcars2 %>% select(mpg, hp, am)
?str
?mtcars
library(data.table)
library(dplyr)
data(mtcars)
mtcars2 <- within(mtcars, {
vs <- factor(vs, labels = c("V", "S"))
am <- factor(am, labels = c("auto", "manu"))
gear <- ordered(gear)
carb <- ordered(carb)
})
mtcars2$cyl <- as.factor(mtcars2$cyl)
mtcars <- mtcars2 %>% select(mpg, hp, am, cyl)
install.packages("tab")
t <- tabmulti(dataset=mtcars,
xvarname="am",
yvarnames=c("mpg", "hp"),
p.include=FALSE)
library(tab)
library(tab)
t <- tabmulti(dataset=mtcars,
xvarname="am",
yvarnames=c("mpg", "hp"),
p.include=FALSE)
t
?tabmulti
install.packages("xtable")
library(tab)
t <- tabmulti(data = mtcars,
xvarname  = "am",
yvarnames = c("mpg", "hp"),
p.include=FALSE)
?mean_sd
??mean_sd
mtcarsDT <- as.data.table(mtcars) # Umwandeln in data.table Format
mtcarsDT[, mean(mpg), by=am]
library(data.table)
mtcarsDT <- as.data.table(mtcars) # Umwandeln in data.table Format
mtcarsDT[, mean(mpg), by=am]
mtcarsDT[, mean=mean(mpg), by=am]
mtcarsDT[, .(mpg, hp), by=am]
plot(mtcarsDT$mpg)
mtcars$cyl %in% c("4", "6")
mtcars$cyl == "4" | mtcars$cyl == "6"
`%not_in%` <- compose(`!`, `%in%`)
`%notin%` <- Negate(`%in%`)
mtcars %>% subset(mpg<15)
View(mtcars)
mtcars %>%
select(cyl) %>%
table(exclude=NULL
)
mtcars %>%
select(cyl) %>%
table(exclude=NULL) %>%
data.table
library(data.table)
dat <- fread("D:/RKurse/MyDatasets/drinks (other) LM.txt")
dat$Person <- as.factor(dat$Person)
library(ggplot2)
library(data.table)
library(dplyr)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
library(ggplot2)
library(data.table)
library(dplyr)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) # Füge Gerade ein
install.packages("ggrepel")
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person))
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person))
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person), na.rm=T,
size=2.4, color="black",
nudge_y = 0.01, nudge_x = 0.14,
segment.size = 0.2)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person), na.rm=T,
size=4, color="black",
nudge_y = 0.01, nudge_x = 0.14,
segment.size = 0.2)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person), na.rm=T,
size=4, color="black",
nudge_y = 2, nudge_x = 0.14,
segment.size = 0.2)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person), na.rm=T,
size=4, color="black",
nudge_y = 1, nudge_x = 1,
segment.size = 0.2)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person), na.rm=T,
size=4,
nudge_y = 1, nudge_x = 1,
segment.size = 0.2)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person),
size=4,
nudge_y = 1, nudge_x = 1,
segment.size = 0.2)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person),
#size=4,
nudge_y = 1, nudge_x = 1,
segment.size = 0.2)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Vision<5],
aes(label=Person),
nudge_y=1, nudge_x=1)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Person==Rolando], aes(label=Person), nudge_y=1, nudge_x=1) # Kennzeichne Rolando
library(data.table)
library(dplyr)
library(ggplot2)
library(ggrepel)
dat <- fread("D:/RKurse/MyDatasets/vision fixed (other) LM.txt",
dec=",", na.strings = "", stringsAsFactors=TRUE)
dat <- dat %>% select(Person, Ages, Gender, Vision)
dat <- dat[!is.na(Ages)]
ggplot(data=dat, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
geom_text_repel(data=dat[Person=="Rolando"], aes(label=Person), nudge_y=1, nudge_x=1) # Kennzeichne Rolando
dat_noRolando <- subset(dat, Person!="Rolando") # Entferne Rolando
cor_noRolando <- cor.test(dat_noRolando$Ages, dat_noRolando$Vision) # Korrelation
cor_noRolando$estimate
reg_noRolando <- lm(data=dat_noRolando, formula=Vision ~ Ages) # Regressionsmodell y = a + bx
x <- summary(reg_noRolando)
x$coefficients
summary(reg_noRolando)[1,1]
x$coefficients[1,1]
x$r.squared
library(ggpubr)
ggplot(data=dat_noRolando, aes(x=Ages, y=Vision)) + # Definiere Daten
geom_point(size=3) + # Scatter plot mit Punkten der Größe 3
scale_x_continuous(name="Alter",       limits=c(20, 60), breaks=seq(20, 60, by=10)) + # x-Achse
scale_y_continuous(name="Sehvermögen", limits=c( 0, 10), breaks=seq( 0, 10, by=1)) + # y-Achse
theme_classic() + # Simple, klassische Formatierung
geom_smooth(method='lm', formula=y~x, se=FALSE) + # Füge Gerade ein
stat_regline_equation(label.x=50, label.y=9) + # Füge Gleichung ein
stat_cor(method="pearson", label.x=40, label.y=3) # Füge Korrelation mit p-Wert ein
setwd("D:/RKurse/Dokumentation/crashcouRse")
library("rmarkdown")
rmarkdown::clean_site()  # delete old files
rmarkdown::render_site(encoding="UTF-8") # render all files new; UTF-8 for ä, ö, ü, ß
{
library(stringr); library(knitr)
filenames <- list.files(pattern=".Rmd")
dont <- str_detect(filenames, paste(c("appendix", "kontakt", "index"), collapse="|"))
filenames <- filenames[!dont]
site.wd <- getwd()
setwd("D:/RKurse/Dokumentation/Vorführung")
for (i in 1:length(filenames)){
purl(paste0(site.wd,"/",filenames[i]))
print(filenames[i])
}
setwd(site.wd)
} # tranlsate website to R codes as well
